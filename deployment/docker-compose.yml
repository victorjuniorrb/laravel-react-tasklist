x-logging:
  &default-logging
  driver: "json-file"
  options:
    max-size: "1m"
    max-file: "1"
    tag: "{{.Name}}"

services:
    # We need to run the FPM container for our application
    laravel.fpm:
        image: ${REGISTRY}/fpm_server:${VERSION}
        restart: unless-stopped
        environment:
            APP_DEBUG: "true"
        volumes:
            - 'storage_app:/var/www/html/storage/app'
        networks:
            - backend
        depends_on:
            redis:
                condition: service_healthy
            mysql:
                condition: service_healthy
        env_file: 
            - stack.env
        logging: *default-logging

    # Run the web server container for static content, and proxying to our FPM container
    laravel.web:
        image: ${REGISTRY}/web_server:${VERSION}
        restart: unless-stopped
        # não é necessário quando se tem um proxy na frente
        ports:
            - '8080:80'
        environment:
            FPM_HOST: "laravel.fpm:9000"
        volumes:
            - 'storage_app:/var/www/html/storage/app'
        networks:
            - frontend
            - backend
        depends_on:
            - laravel.fpm
        logging: *default-logging

    # Run the Laravel Scheduler
    laravel.cron:
        image: ${REGISTRY}/cron:${VERSION}
        restart: unless-stopped
        networks:
            - backend
        depends_on:
            mysql:
                condition: service_healthy
        env_file: 
            - stack.env
        logging: *default-logging

    # For running things like migrations, and queue jobs
    laravel.cli:
        image: ${REGISTRY}/cli:${VERSION}
        networks:
            - backend
        env_file: 
            - stack.env
        logging: *default-logging

    # For running things like migrations, and queue jobs
    laravel.migrations:
        image: ${REGISTRY}/cli:${VERSION}
        networks:
            - backend
        entrypoint: ["php", "artisan", "migrate", "--force"]
        # Comando para froçar recriar e popluar a base de dados
        # entrypoint: ["php", "artisan", "migrate:fresh", "--seed"]
        depends_on:
            mysql:
                condition: service_healthy
        env_file: 
            - stack.env
        logging: *default-logging

    mysql:
        image: mariadb:10.6.18-focal
        restart: unless-stopped
        environment:
            TZ: America/Sao_Paulo
            MARIADB_PASSWORD: '${DB_PASSWORD}'
            MARIADB_DATABASE: '${DB_DATABASE}'
            MARIADB_USER: '${DB_USERNAME}'
            MARIADB_RANDOM_ROOT_PASSWORD: '1'
        volumes:
            - 'mysql:/var/lib/mysql'
        networks:
            - backend
        healthcheck:
            test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
            start_period: 10s
            interval: 10s
            timeout: 5s
            retries: 3
        logging: *default-logging

    redis:
        image: 'redis:7-alpine'
        restart: unless-stopped
        environment:
            TZ: America/Sao_Paulo
            ALLOW_EMPTY_PASSWORD: yes
            REDIS_DISABLE_COMMANDS: 'FLUSHDB,FLUSHALL'
        volumes:
            - 'redis:/data'
        networks:
            - backend
        healthcheck:
            test: ["CMD", "redis-cli", "ping" ]
            retries: 5
            timeout: 5s
        logging: *default-logging

networks:
    frontend:
    backend:
volumes:
    mysql:
    redis:
    storage_app: